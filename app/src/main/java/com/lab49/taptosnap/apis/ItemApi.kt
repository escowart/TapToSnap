/**
 * Tap To Snap API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lab49.taptosnap.apis

import java.io.IOException

import com.lab49.taptosnap.models.Item
import com.lab49.taptosnap.models.UploadImageResponse

import com.squareup.moshi.Json

import com.lab49.taptosnap.infrastructure.ApiClient
import com.lab49.taptosnap.infrastructure.ApiResponse
import com.lab49.taptosnap.infrastructure.ClientException
import com.lab49.taptosnap.infrastructure.ClientError
import com.lab49.taptosnap.infrastructure.ServerException
import com.lab49.taptosnap.infrastructure.ServerError
import com.lab49.taptosnap.infrastructure.MultiValueMap
import com.lab49.taptosnap.infrastructure.RequestConfig
import com.lab49.taptosnap.infrastructure.RequestMethod
import com.lab49.taptosnap.infrastructure.ResponseType
import com.lab49.taptosnap.infrastructure.Success
import com.lab49.taptosnap.infrastructure.toMultiValue

class ItemApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Get the list of items
    * Get the list of items
    * @return kotlin.Array<Item>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getItems() : kotlin.Array<Item> {
        val localVarResponse = getItemsWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Array<Item>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the list of items
    * Get the list of items
    * @return ApiResponse<kotlin.Array<Item>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getItemsWithHttpInfo() : ApiResponse<kotlin.Array<Item>?> {
        val localVariableConfig = getItemsRequestConfig()

        return request<Unit, kotlin.Array<Item>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getItems
    *
    * @return RequestConfig
    */
    fun getItemsRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/item/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Upload image for the given item
    * Upload image for the given item
    * @param imageLabel  
    * @param image  
    * @return UploadImageResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadImage(imageLabel: kotlin.String, image: java.io.File) : UploadImageResponse {
        val localVarResponse = uploadImageWithHttpInfo(imageLabel = imageLabel, image = image)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UploadImageResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Upload image for the given item
    * Upload image for the given item
    * @param imageLabel  
    * @param image  
    * @return ApiResponse<UploadImageResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadImageWithHttpInfo(imageLabel: kotlin.String, image: java.io.File) : ApiResponse<UploadImageResponse?> {
        val localVariableConfig = uploadImageRequestConfig(imageLabel = imageLabel, image = image)

        return request<Map<String, Any?>, UploadImageResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation uploadImage
    *
    * @param imageLabel  
    * @param image  
    * @return RequestConfig
    */
    fun uploadImageRequestConfig(imageLabel: kotlin.String, image: java.io.File) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("imageLabel" to imageLabel, "image" to image)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/item/image",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
