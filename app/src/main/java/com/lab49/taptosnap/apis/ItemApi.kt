/**
 * Tap To Snap API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.lab49.taptosnap.apis

import java.io.IOException

import com.lab49.taptosnap.models.Item
import com.lab49.taptosnap.models.UploadImageResponse

import com.squareup.moshi.Json

import com.lab49.taptosnap.infrastructure.ApiClient
import com.lab49.taptosnap.infrastructure.ApiResponse
import com.lab49.taptosnap.infrastructure.ClientException
import com.lab49.taptosnap.infrastructure.ClientError
import com.lab49.taptosnap.infrastructure.ServerException
import com.lab49.taptosnap.infrastructure.ServerError
import com.lab49.taptosnap.infrastructure.MultiValueMap
import com.lab49.taptosnap.infrastructure.RequestConfig
import com.lab49.taptosnap.infrastructure.RequestMethod
import com.lab49.taptosnap.infrastructure.ResponseType
import com.lab49.taptosnap.infrastructure.Success
import com.lab49.taptosnap.infrastructure.toMultiValue

class ItemApi(runOnUiThread: (Runnable) -> Unit, basePath: kotlin.String = defaultBasePath) : ApiClient(runOnUiThread, basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Get the list of items
    * Get the list of items
    * @return kotlin.Array<Item>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun getItems(
        callback: (response: ApiResponse<kotlin.Array<Item>>) -> Unit
    ) {
        val body = null
        val query: MultiValueMap = mutableMapOf()
        val headers: MutableMap<String, String> = mutableMapOf()
        headers["Accept"] = "application/json"

        val config = RequestConfig<Unit>(
            method = RequestMethod.GET,
            path = "/item/list",
            query = query,
            headers = headers,
            body = body
        )
         request(config, callback)
    }
    /**
    * Upload image for the given item
    * Upload image for the given item
    * @param imageLabel  
    * @param image  
    * @return UploadImageResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadImage(imageLabel: kotlin.String, image: java.io.File, 
        callback: (response: ApiResponse<UploadImageResponse>) -> Unit
    ) {
        val body = mapOf("imageLabel" to imageLabel, "image" to image)
        val query: MultiValueMap = mutableMapOf()
        val headers: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        headers["Accept"] = "application/json"

        val config = RequestConfig<Map<String, Any?>>(
            method = RequestMethod.POST,
            path = "/item/image",
            query = query,
            headers = headers,
            body = body
        )
         request(config, callback)
    }
}
